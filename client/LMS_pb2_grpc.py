# Generated by the gRPC Python protocol compiler plugin. DO NOT EDIT!
"""Client and server classes corresponding to protobuf-defined services."""
import grpc
import warnings

import LMS_pb2 as LMS__pb2

GRPC_GENERATED_VERSION = '1.67.0'
GRPC_VERSION = grpc.__version__
_version_not_supported = False

try:
    from grpc._utilities import first_version_is_lower
    _version_not_supported = first_version_is_lower(GRPC_VERSION, GRPC_GENERATED_VERSION)
except ImportError:
    _version_not_supported = True

if _version_not_supported:
    raise RuntimeError(
        f'The grpc package installed is at version {GRPC_VERSION},'
        + f' but the generated code in LMS_pb2_grpc.py depends on'
        + f' grpcio>={GRPC_GENERATED_VERSION}.'
        + f' Please upgrade your grpc module to grpcio>={GRPC_GENERATED_VERSION}'
        + f' or downgrade your generated code using grpcio-tools<={GRPC_VERSION}.'
    )


class LMSStub(object):
    """Missing associated documentation comment in .proto file."""

    def __init__(self, channel):
        """Constructor.

        Args:
            channel: A grpc.Channel.
        """
        self.get_server_message = channel.unary_unary(
                '/lms.LMS/get_server_message',
                request_serializer=LMS__pb2.requestPayload.SerializeToString,
                response_deserializer=LMS__pb2.responsePayload.FromString,
                _registered_method=True)
        self.login = channel.unary_unary(
                '/lms.LMS/login',
                request_serializer=LMS__pb2.loginPayload.SerializeToString,
                response_deserializer=LMS__pb2.loginResponsePayload.FromString,
                _registered_method=True)
        self.logout = channel.unary_unary(
                '/lms.LMS/logout',
                request_serializer=LMS__pb2.logoutPayload.SerializeToString,
                response_deserializer=LMS__pb2.statusResponsePayload.FromString,
                _registered_method=True)
        self.get_assignments = channel.unary_unary(
                '/lms.LMS/get_assignments',
                request_serializer=LMS__pb2.getAssignmentsRequest.SerializeToString,
                response_deserializer=LMS__pb2.multipleAssignmentResponse.FromString,
                _registered_method=True)
        self.post_assignment = channel.unary_unary(
                '/lms.LMS/post_assignment',
                request_serializer=LMS__pb2.postAssignmentPayload.SerializeToString,
                response_deserializer=LMS__pb2.statusResponsePayload.FromString,
                _registered_method=True)
        self.download_assignment = channel.unary_unary(
                '/lms.LMS/download_assignment',
                request_serializer=LMS__pb2.downloadAssignmentRequest.SerializeToString,
                response_deserializer=LMS__pb2.downloadAssignmentResponse.FromString,
                _registered_method=True)
        self.submit_assignment = channel.unary_unary(
                '/lms.LMS/submit_assignment',
                request_serializer=LMS__pb2.submitAssignment.SerializeToString,
                response_deserializer=LMS__pb2.statusResponsePayload.FromString,
                _registered_method=True)
        self.get_all_submissions_of_one_assignment = channel.unary_unary(
                '/lms.LMS/get_all_submissions_of_one_assignment',
                request_serializer=LMS__pb2.getAllSubmissionsRequest.SerializeToString,
                response_deserializer=LMS__pb2.getAllSubmissionResponse.FromString,
                _registered_method=True)
        self.download_submission = channel.unary_unary(
                '/lms.LMS/download_submission',
                request_serializer=LMS__pb2.downloadSubmissionRequest.SerializeToString,
                response_deserializer=LMS__pb2.downloadSubmissionResponse.FromString,
                _registered_method=True)
        self.grade_submission = channel.unary_unary(
                '/lms.LMS/grade_submission',
                request_serializer=LMS__pb2.gradeAssignmentRequest.SerializeToString,
                response_deserializer=LMS__pb2.statusResponsePayload.FromString,
                _registered_method=True)
        self.retrieve_grades = channel.unary_unary(
                '/lms.LMS/retrieve_grades',
                request_serializer=LMS__pb2.retrieveGradesRequest.SerializeToString,
                response_deserializer=LMS__pb2.retrieveGradesResponse.FromString,
                _registered_method=True)
        self.get_queries = channel.unary_unary(
                '/lms.LMS/get_queries',
                request_serializer=LMS__pb2.getQueriesRequest.SerializeToString,
                response_deserializer=LMS__pb2.getQueriesResponse.FromString,
                _registered_method=True)
        self.post_query = channel.unary_unary(
                '/lms.LMS/post_query',
                request_serializer=LMS__pb2.postQueryPayload.SerializeToString,
                response_deserializer=LMS__pb2.statusResponsePayload.FromString,
                _registered_method=True)
        self.answer_query = channel.unary_unary(
                '/lms.LMS/answer_query',
                request_serializer=LMS__pb2.answerQueryPayload.SerializeToString,
                response_deserializer=LMS__pb2.statusResponsePayload.FromString,
                _registered_method=True)
        self.llm = channel.unary_unary(
                '/lms.LMS/llm',
                request_serializer=LMS__pb2.llmRequest.SerializeToString,
                response_deserializer=LMS__pb2.llmResponse.FromString,
                _registered_method=True)
        self.get_llm_logs = channel.unary_unary(
                '/lms.LMS/get_llm_logs',
                request_serializer=LMS__pb2.llmLogReq.SerializeToString,
                response_deserializer=LMS__pb2.llmLogRes.FromString,
                _registered_method=True)
        self.get_all_course_materials = channel.unary_unary(
                '/lms.LMS/get_all_course_materials',
                request_serializer=LMS__pb2.getAllCourseMaterialsRequest.SerializeToString,
                response_deserializer=LMS__pb2.getAllCourseMaterialsResponse.FromString,
                _registered_method=True)
        self.post_course_material = channel.unary_unary(
                '/lms.LMS/post_course_material',
                request_serializer=LMS__pb2.postCourseMaterial.SerializeToString,
                response_deserializer=LMS__pb2.statusResponsePayload.FromString,
                _registered_method=True)
        self.download_course_material = channel.unary_unary(
                '/lms.LMS/download_course_material',
                request_serializer=LMS__pb2.downloadCourseMaterialRequest.SerializeToString,
                response_deserializer=LMS__pb2.downloadCourseMaterialResponse.FromString,
                _registered_method=True)
        self.request_vote = channel.unary_unary(
                '/lms.LMS/request_vote',
                request_serializer=LMS__pb2.requestVoteRequest.SerializeToString,
                response_deserializer=LMS__pb2.requestVoteResponse.FromString,
                _registered_method=True)
        self.heart_beat = channel.unary_unary(
                '/lms.LMS/heart_beat',
                request_serializer=LMS__pb2.heartBeatPayload.SerializeToString,
                response_deserializer=LMS__pb2.heartBeatResponse.FromString,
                _registered_method=True)
        self.get_leader_id = channel.unary_unary(
                '/lms.LMS/get_leader_id',
                request_serializer=LMS__pb2.requestPayload.SerializeToString,
                response_deserializer=LMS__pb2.leaderIdRes.FromString,
                _registered_method=True)


class LMSServicer(object):
    """Missing associated documentation comment in .proto file."""

    def get_server_message(self, request, context):
        """test
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def login(self, request, context):
        """Auth
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def logout(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def get_assignments(self, request, context):
        """Assignment
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def post_assignment(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def download_assignment(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def submit_assignment(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def get_all_submissions_of_one_assignment(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def download_submission(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def grade_submission(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def retrieve_grades(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def get_queries(self, request, context):
        """Queries
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def post_query(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def answer_query(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def llm(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def get_llm_logs(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def get_all_course_materials(self, request, context):
        """Course material
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def post_course_material(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def download_course_material(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def request_vote(self, request, context):
        """RAFT
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def heart_beat(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def get_leader_id(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')


def add_LMSServicer_to_server(servicer, server):
    rpc_method_handlers = {
            'get_server_message': grpc.unary_unary_rpc_method_handler(
                    servicer.get_server_message,
                    request_deserializer=LMS__pb2.requestPayload.FromString,
                    response_serializer=LMS__pb2.responsePayload.SerializeToString,
            ),
            'login': grpc.unary_unary_rpc_method_handler(
                    servicer.login,
                    request_deserializer=LMS__pb2.loginPayload.FromString,
                    response_serializer=LMS__pb2.loginResponsePayload.SerializeToString,
            ),
            'logout': grpc.unary_unary_rpc_method_handler(
                    servicer.logout,
                    request_deserializer=LMS__pb2.logoutPayload.FromString,
                    response_serializer=LMS__pb2.statusResponsePayload.SerializeToString,
            ),
            'get_assignments': grpc.unary_unary_rpc_method_handler(
                    servicer.get_assignments,
                    request_deserializer=LMS__pb2.getAssignmentsRequest.FromString,
                    response_serializer=LMS__pb2.multipleAssignmentResponse.SerializeToString,
            ),
            'post_assignment': grpc.unary_unary_rpc_method_handler(
                    servicer.post_assignment,
                    request_deserializer=LMS__pb2.postAssignmentPayload.FromString,
                    response_serializer=LMS__pb2.statusResponsePayload.SerializeToString,
            ),
            'download_assignment': grpc.unary_unary_rpc_method_handler(
                    servicer.download_assignment,
                    request_deserializer=LMS__pb2.downloadAssignmentRequest.FromString,
                    response_serializer=LMS__pb2.downloadAssignmentResponse.SerializeToString,
            ),
            'submit_assignment': grpc.unary_unary_rpc_method_handler(
                    servicer.submit_assignment,
                    request_deserializer=LMS__pb2.submitAssignment.FromString,
                    response_serializer=LMS__pb2.statusResponsePayload.SerializeToString,
            ),
            'get_all_submissions_of_one_assignment': grpc.unary_unary_rpc_method_handler(
                    servicer.get_all_submissions_of_one_assignment,
                    request_deserializer=LMS__pb2.getAllSubmissionsRequest.FromString,
                    response_serializer=LMS__pb2.getAllSubmissionResponse.SerializeToString,
            ),
            'download_submission': grpc.unary_unary_rpc_method_handler(
                    servicer.download_submission,
                    request_deserializer=LMS__pb2.downloadSubmissionRequest.FromString,
                    response_serializer=LMS__pb2.downloadSubmissionResponse.SerializeToString,
            ),
            'grade_submission': grpc.unary_unary_rpc_method_handler(
                    servicer.grade_submission,
                    request_deserializer=LMS__pb2.gradeAssignmentRequest.FromString,
                    response_serializer=LMS__pb2.statusResponsePayload.SerializeToString,
            ),
            'retrieve_grades': grpc.unary_unary_rpc_method_handler(
                    servicer.retrieve_grades,
                    request_deserializer=LMS__pb2.retrieveGradesRequest.FromString,
                    response_serializer=LMS__pb2.retrieveGradesResponse.SerializeToString,
            ),
            'get_queries': grpc.unary_unary_rpc_method_handler(
                    servicer.get_queries,
                    request_deserializer=LMS__pb2.getQueriesRequest.FromString,
                    response_serializer=LMS__pb2.getQueriesResponse.SerializeToString,
            ),
            'post_query': grpc.unary_unary_rpc_method_handler(
                    servicer.post_query,
                    request_deserializer=LMS__pb2.postQueryPayload.FromString,
                    response_serializer=LMS__pb2.statusResponsePayload.SerializeToString,
            ),
            'answer_query': grpc.unary_unary_rpc_method_handler(
                    servicer.answer_query,
                    request_deserializer=LMS__pb2.answerQueryPayload.FromString,
                    response_serializer=LMS__pb2.statusResponsePayload.SerializeToString,
            ),
            'llm': grpc.unary_unary_rpc_method_handler(
                    servicer.llm,
                    request_deserializer=LMS__pb2.llmRequest.FromString,
                    response_serializer=LMS__pb2.llmResponse.SerializeToString,
            ),
            'get_llm_logs': grpc.unary_unary_rpc_method_handler(
                    servicer.get_llm_logs,
                    request_deserializer=LMS__pb2.llmLogReq.FromString,
                    response_serializer=LMS__pb2.llmLogRes.SerializeToString,
            ),
            'get_all_course_materials': grpc.unary_unary_rpc_method_handler(
                    servicer.get_all_course_materials,
                    request_deserializer=LMS__pb2.getAllCourseMaterialsRequest.FromString,
                    response_serializer=LMS__pb2.getAllCourseMaterialsResponse.SerializeToString,
            ),
            'post_course_material': grpc.unary_unary_rpc_method_handler(
                    servicer.post_course_material,
                    request_deserializer=LMS__pb2.postCourseMaterial.FromString,
                    response_serializer=LMS__pb2.statusResponsePayload.SerializeToString,
            ),
            'download_course_material': grpc.unary_unary_rpc_method_handler(
                    servicer.download_course_material,
                    request_deserializer=LMS__pb2.downloadCourseMaterialRequest.FromString,
                    response_serializer=LMS__pb2.downloadCourseMaterialResponse.SerializeToString,
            ),
            'request_vote': grpc.unary_unary_rpc_method_handler(
                    servicer.request_vote,
                    request_deserializer=LMS__pb2.requestVoteRequest.FromString,
                    response_serializer=LMS__pb2.requestVoteResponse.SerializeToString,
            ),
            'heart_beat': grpc.unary_unary_rpc_method_handler(
                    servicer.heart_beat,
                    request_deserializer=LMS__pb2.heartBeatPayload.FromString,
                    response_serializer=LMS__pb2.heartBeatResponse.SerializeToString,
            ),
            'get_leader_id': grpc.unary_unary_rpc_method_handler(
                    servicer.get_leader_id,
                    request_deserializer=LMS__pb2.requestPayload.FromString,
                    response_serializer=LMS__pb2.leaderIdRes.SerializeToString,
            ),
    }
    generic_handler = grpc.method_handlers_generic_handler(
            'lms.LMS', rpc_method_handlers)
    server.add_generic_rpc_handlers((generic_handler,))
    server.add_registered_method_handlers('lms.LMS', rpc_method_handlers)


 # This class is part of an EXPERIMENTAL API.
class LMS(object):
    """Missing associated documentation comment in .proto file."""

    @staticmethod
    def get_server_message(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/lms.LMS/get_server_message',
            LMS__pb2.requestPayload.SerializeToString,
            LMS__pb2.responsePayload.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def login(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/lms.LMS/login',
            LMS__pb2.loginPayload.SerializeToString,
            LMS__pb2.loginResponsePayload.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def logout(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/lms.LMS/logout',
            LMS__pb2.logoutPayload.SerializeToString,
            LMS__pb2.statusResponsePayload.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def get_assignments(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/lms.LMS/get_assignments',
            LMS__pb2.getAssignmentsRequest.SerializeToString,
            LMS__pb2.multipleAssignmentResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def post_assignment(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/lms.LMS/post_assignment',
            LMS__pb2.postAssignmentPayload.SerializeToString,
            LMS__pb2.statusResponsePayload.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def download_assignment(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/lms.LMS/download_assignment',
            LMS__pb2.downloadAssignmentRequest.SerializeToString,
            LMS__pb2.downloadAssignmentResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def submit_assignment(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/lms.LMS/submit_assignment',
            LMS__pb2.submitAssignment.SerializeToString,
            LMS__pb2.statusResponsePayload.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def get_all_submissions_of_one_assignment(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/lms.LMS/get_all_submissions_of_one_assignment',
            LMS__pb2.getAllSubmissionsRequest.SerializeToString,
            LMS__pb2.getAllSubmissionResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def download_submission(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/lms.LMS/download_submission',
            LMS__pb2.downloadSubmissionRequest.SerializeToString,
            LMS__pb2.downloadSubmissionResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def grade_submission(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/lms.LMS/grade_submission',
            LMS__pb2.gradeAssignmentRequest.SerializeToString,
            LMS__pb2.statusResponsePayload.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def retrieve_grades(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/lms.LMS/retrieve_grades',
            LMS__pb2.retrieveGradesRequest.SerializeToString,
            LMS__pb2.retrieveGradesResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def get_queries(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/lms.LMS/get_queries',
            LMS__pb2.getQueriesRequest.SerializeToString,
            LMS__pb2.getQueriesResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def post_query(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/lms.LMS/post_query',
            LMS__pb2.postQueryPayload.SerializeToString,
            LMS__pb2.statusResponsePayload.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def answer_query(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/lms.LMS/answer_query',
            LMS__pb2.answerQueryPayload.SerializeToString,
            LMS__pb2.statusResponsePayload.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def llm(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/lms.LMS/llm',
            LMS__pb2.llmRequest.SerializeToString,
            LMS__pb2.llmResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def get_llm_logs(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/lms.LMS/get_llm_logs',
            LMS__pb2.llmLogReq.SerializeToString,
            LMS__pb2.llmLogRes.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def get_all_course_materials(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/lms.LMS/get_all_course_materials',
            LMS__pb2.getAllCourseMaterialsRequest.SerializeToString,
            LMS__pb2.getAllCourseMaterialsResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def post_course_material(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/lms.LMS/post_course_material',
            LMS__pb2.postCourseMaterial.SerializeToString,
            LMS__pb2.statusResponsePayload.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def download_course_material(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/lms.LMS/download_course_material',
            LMS__pb2.downloadCourseMaterialRequest.SerializeToString,
            LMS__pb2.downloadCourseMaterialResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def request_vote(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/lms.LMS/request_vote',
            LMS__pb2.requestVoteRequest.SerializeToString,
            LMS__pb2.requestVoteResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def heart_beat(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/lms.LMS/heart_beat',
            LMS__pb2.heartBeatPayload.SerializeToString,
            LMS__pb2.heartBeatResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def get_leader_id(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/lms.LMS/get_leader_id',
            LMS__pb2.requestPayload.SerializeToString,
            LMS__pb2.leaderIdRes.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)
